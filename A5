import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder

# Load the data from the Excel file
df = pd.read_excel(r"C:\Users\year3\Desktop\lab2\Lab Session Data.xlsx", sheet_name=2)

# Display the first few rows to understand the structure
print("First few rows of the dataset:")
print(df.head())
print()

# Study each attribute and identify datatypes
print("Data Types and Unique Values for Each Attribute:")
print(df.info())


# Identify categorical and numeric variables
ordinal_vars = []  # Add names of ordinal variables here
nominal_vars = []  # Add names of nominal variables here

# Apply label encoding to ordinal variables
le = LabelEncoder()
for var in ordinal_vars:
    df[var] = le.fit_transform(df[var])

# Apply one-hot encoding to nominal variables
df = pd.get_dummies(df, columns=nominal_vars)

# Study the data range for numeric variables
print("\nData Range for Numeric Variables:")
print(df.describe())

# Study the presence of missing values in each attribute
missing_values = df.isnull().sum()
print("\nMissing Values in Each Attribute:")
print(missing_values)

# Study the presence of outliers
print("\nBoxplots to Detect Outliers:")
for column in df.select_dtypes(include=['float64', 'int64']).columns:
    plt.figure(figsize=(10, 6))
    sns.boxplot(x=df[column])
    plt.title(f'Boxplot for {column}')
    plt.show()

# Using IQR to identify outliers
Q1 = df.quantile(0.25)
Q3 = df.quantile(0.75)
IQR = Q3 - Q1

outliers = ((df < (Q1 - 1.5 * IQR)) | (df > (Q3 + 1.5 * IQR))).sum()
print("\nOutliers Count in Each Attribute:")
print(outliers)

# Calculate mean and variance (or standard deviation) for numeric variables
mean_var = df.select_dtypes(include=['float64', 'int64']).agg(['mean', 'var'])
print("\nMean and Variance for Numeric Variables:")
print(mean_var)

# Alternatively, calculate standard deviation
std-dev = df.select_dtypes(include=['float64', 'int64']).std()
print("\nStandard Deviation for Numeric Variables:")
print(std-dev)
